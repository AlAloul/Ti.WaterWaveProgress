/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.waterwaveprogress;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.Log;
import org.appcelerator.titanium.util.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;
import org.appcelerator.titanium.TiApplication;

import android.graphics.Color;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.app.Activity;
import cn.modificator.waterwave_progress.*;

// This proxy can be created by calling Waterwaveprogress.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = WaterwaveprogressModule.class)
public class ViewProxy extends TiViewProxy {
	// Standard Debugging variables
	private static final String LCAT = "WaWaView";

	float progressWidth;
	float fontSize;
	int progressColor;
	int progressBgColor;
	int waterWaveColor;
	int waterWaveBgColor;
	float progress2WaterWidth;
	boolean showProgress;
	boolean showNumerical;
	int textColor;
	int progress;
	int maxProgress;

	WaterWaveProgress view;

	private class WWPView extends TiUIView {
		public WWPView(TiViewProxy proxy) {
			super(proxy);
			LayoutParams lp = new LayoutParams(LayoutParams.WRAP_CONTENT,
					LayoutParams.WRAP_CONTENT);
			LinearLayout container = new LinearLayout(proxy.getActivity());
			container.setLayoutParams(lp);
			view = new WaterWaveProgress(TiApplication.getInstance()
					.getApplicationContext());
			container.addView(view);
			setNativeView(container);
		}

		@Override
		public void processProperties(KrollDict d) {
			super.processProperties(d);
		}
	}

	// Constructor
	public ViewProxy() {
		super();
	}

	@Override
	public TiUIView createView(Activity activity) {
		TiUIView view = new WWPView(this);
		view.getLayoutParams().autoFillsHeight = true;
		view.getLayoutParams().autoFillsWidth = true;
		return view;
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict options) {
		super.handleCreationDict(options);
		if (options.containsKeyAndNotNull("progress")) {
			progress = TiConvert.toInt(options, "progress");
		}
		if (options.containsKeyAndNotNull("maxProgress")) {
			maxProgress = TiConvert.toInt(options, "maxProgress");
		}
		if (options.containsKeyAndNotNull("progressWidth")) {
			progressWidth = TiConvert.toFloat(options, "progressWidth");
		}
		if (options.containsKeyAndNotNull("fontSize")) {
			fontSize = TiConvert.toFloat(options, "fontSize");
		}
		if (options.containsKeyAndNotNull("progress2WaterWidth")) {
			progress2WaterWidth = TiConvert.toFloat(options,
					"progress2WaterWidth");
		}
		if (options.containsKeyAndNotNull("progressColor")) {
			progressColor = TiConvert.toColor(options, "progressColor");
		}
		if (options.containsKeyAndNotNull("progressBgColor")) {
			progressBgColor = TiConvert.toColor(options, "progressBgColor");
		}
		if (options.containsKeyAndNotNull("waterWaveColor")) {
			waterWaveColor = TiConvert.toColor(options, "waterWaveColor");
		}
		if (options.containsKeyAndNotNull("waterWaveBgColor")) {
			waterWaveBgColor = TiConvert.toColor(options, "waterWaveBgColor");
		}
		if (options.containsKeyAndNotNull("textColor")) {
			textColor = TiConvert.toColor(options, "textColor");
		}
		if (options.containsKeyAndNotNull("showNumerical")) {
			showNumerical = TiConvert.toBoolean(options, "showNumerical");
		}
		if (options.containsKeyAndNotNull("showProgress")) {
			showProgress = TiConvert.toBoolean(options, "showProgress");
		}
	}

	@Kroll.method
	public void setProgress(int progress) {
		view.setProgress(progress);
	}
	@Kroll.method
	public void setRingWidth(float width) {
		view.setRingWidth(width);
	}
	@Kroll.method
	public void setCrestCount(float crestCount) {
		view.setCrestCount(crestCount);
	}
	@Kroll.method
	public void setAmplitude(float amp) {
		view.setAmplitude(amp);
	}
	
}